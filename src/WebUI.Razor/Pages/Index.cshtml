@page
@model IndexModel

@{
    ViewData["Title"] = @Model._projectSettings.ProjectName;
}

<div class="container">
    <div class="row d-flex align-items-center justify-content-center">
        @if (!@Model.Locations.Any())
        {
            <p>
                <em>no locations/sensors</em>
            </p>
        }
        else
        {
            @foreach (var location in @Model.Locations)
            {
                <div class="container">
                    <div class="container">
                        <h1 class="display-4 row d-flex align-items-center justify-content-center groupname">
                            <a class="text-decoration-none text-reset  row d-flex align-items-center justify-content-center"
                                asp-area="" asp-page="/Index">@location.Name</a>
                        </h1>
                            <div class="container">
                                <div class="row d-flex align-items-center justify-content-center">
                                    <p>Result of last reading: @location.ModbusStatus.Success</p>
                                    <p>Total readings: @location.ModbusStatus.AttemptedModbusReadings</p>
                                    <p>Successfull readings: @location.ModbusStatus.SuccessfullModbusReadings</p>
                                    <p>Failed readings: @location.ModbusStatus.FailedModbusReadings</p>
                                    @if (@location.ModbusStatus.FailedModbusReadings != 0)
                                    {
                                        <p>Time of last failed modbusreading: @location.ModbusStatus.TimeOfLastFailedReading</p>
                                        <p>Last error message: @location.ModbusStatus.ErrorMessage</p>
                                    }
                                </div>
                            </div>
                    </div>
                    <div class="container">
                        <div class="row d-flex align-items-center justify-content-center">
                            @foreach (var sensor in location.Sensors)
                            {
                                await Html.RenderPartialAsync("_SensorCard", sensor);
                            }
                        </div>
                        <div class="container">
                            <div class="row d-flex align-items-center justify-content-center">
                                @foreach (var alarm in location.Alarms)
                                {
                                    await Html.RenderPartialAsync("_AlarmCard", alarm);
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }


        }
    </div>
</div>


<style>
    .groupname {
        margin-top: 50;
        min-height: 75px;
    }


    .vertical {
        width: 100px;
        /* Width of the progress bar */
        height: 100px;
        /* Height of the progress bar */
        position: relative;
    }

    .vertical .progress-bar {
        width: 100%;
        /* Full width */
        height: 0;
        /* Start out from zero height */
        position: absolute;
        bottom: 0;
        /* Position at the bottom */
    }

    .horizontal {
        width: 100px;
        /* Width of the progress bar */
        height: 25px;
        /* Height of the progress bar */
        position: relative;
    }

    .horizontal .progress-bar {
        width: 0%;
        /* Full width */
        height: 100%;
        /* Start out from zero height */
        position: absolute;
        bottom: 0;
        /* Position at the bottom */
    }

    .gauge {
        position: relative;
        border-radius: 50%/100% 100% 0 0;
        border-color: #b8daff;
        background-color: var(--color, #0d6efd);
        overflow: hidden;

    }

    .gauge:before {
        content: "";
        display: block;
        padding-top: 50%;
        /* ratio of 2:1*/
        background-color: #0d6efd;
    }

    .gauge .chart {
        overflow: hidden;
    }

    .gauge .mask {
        position: absolute;
        left: 20%;
        right: 20%;
        bottom: 0;
        top: 40%;
        background-color: #fff;
        border-radius: 50%/100% 100% 0 0;
        background-color: #d1e7dd;
    }

    .gauge .percentage {
        position: absolute;
        top: -1px;
        left: -1px;
        bottom: 0;
        right: -1px;
        background-color: var(--background, #aaa);
        transform: rotate(var(--rotation));
        transform-origin: bottom center;
        transition-duration: 600;
    }

    .gauge:hover {
        --rotation: 100deg;
    }

    .gauge .value {
        position: absolute;
        bottom: 0%;
        left: 0;
        width: 100%;
        text-align: center;
    }

    .gauge .min {
        position: absolute;
        bottom: 0;
        left: 5%;
    }

    .gauge .max {
        position: absolute;
        bottom: 0;
        right: 5%;
    }
</style>