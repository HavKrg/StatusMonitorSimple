@model WebUI.Razor.Pages.Sensors.DetailsModel

<div class="chart-container">
    <canvas id="sensorChart"></canvas>
    <div>
        <p>@Model.Readings.CurrentPage / @Model.Readings.TotalPages</p>
    </div>
    @if (Model.Readings.TotalPages > 0)
    {
        <nav>
            <ul class="pagination">
                <li class="page-item @(Model.Readings.CurrentPage == 1 ? "disabled" : "")">
                    <!-- First Page -->
                    @if (Model.Readings.CurrentPage != 1)
                    {
                        <a class="page-link" asp-page="/Sensors/Details" asp-route-sensorId="@Model.Sensor.Id"
                            asp-route-pageNumber="1">First</a>
                    }
                    else
                    {
                        <span class="page-link">First</span>
                    }
                </li>

                <li class="page-item @(Model.Readings.CurrentPage == 1 ? "disabled" : "")">
                    <!-- Previous Page -->
                    @if (Model.Readings.CurrentPage != 1)
                    {
                        <a class="page-link" asp-page="/Sensors/Details" asp-route-sensorId="@Model.Sensor.Id"
                            asp-route-pageNumber="@((Model.Readings.CurrentPage - 1) <= 0 ? 1 : (Model.Readings.CurrentPage - 1))">Previous</a>
                    }
                    else
                    {
                        <span class="page-link">Previous</span>
                    }
                </li>

                <li class="page-item @(Model.Readings.CurrentPage == Model.Readings.TotalPages ? "disabled" : "")">
                    <!-- Next Page -->
                    @if (Model.Readings.CurrentPage != Model.Readings.TotalPages)
                    {
                        <a class="page-link" asp-page="/Sensors/Details" asp-route-sensorId="@Model.Sensor.Id"
                            asp-route-pageNumber="@((Model.Readings.CurrentPage + 1) >= Model.Readings.TotalPages ? Model.Readings.TotalPages : (Model.Readings.CurrentPage + 1))">Next</a>
                    }
                    else
                    {
                        <span class="page-link">Next</span>
                    }
                </li>

                <li class="page-item @(Model.Readings.CurrentPage == Model.Readings.TotalPages ? "disabled" : "")">
                    <!-- Last Page -->
                    @if (Model.Readings.CurrentPage != Model.Readings.TotalPages)
                    {
                        <a class="page-link" asp-page="/Sensors/Details" asp-route-sensorId="@Model.Sensor.Id"
                            asp-route-pageNumber="@Model.Readings.TotalPages">Last</a>
                    }
                    else
                    {
                        <span class="page-link">Last</span>
                    }
                </li>
            </ul>
        </nav>
    }

    <script>
        var sensorData = @Json.Serialize(Model.Readings.Data);
        var minValue = @Model.Sensor.MinReading;
        var maxValue = @Model.Sensor.MaxReading;
        var measurement = @Model.Sensor.Measurement;
        

        var ctx = document.getElementById('sensorChart');
        var myChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: sensorData.map(function (reading) {
                    var date = new Date(reading.created);
                    return `${date.getDate()}/${date.getMonth() + 1}  ${date.getHours()}:${date.getMinutes().toString().padStart(2, '0')}`;
                }),
                datasets: [{
                    label: @Json.Serialize(Model.Sensor.Description),
                    data: sensorData.map(function (reading) { return parseFloat(reading.value); }), // make sure this is a number
                    borderColor: 'rgba(0, 123, 255, 0.5)',
                    borderWidth: 2
                }]
            },
            options: {
                scales: {
                    y: {
                        min: parseFloat(minValue),
                        max: parseFloat(maxValue),
                        ticks: {
                            // Include a unit in the label
                            callback: function (value, index, values) {
                                return value ; // Replace 'unit' with your actual unit
                            }
                        }
                    }
                },
            }
        });
    </script>

    @* <script>
        var sensorData = @Json.Serialize(Model.Readings.Data);
        var minValue = @Model.Sensor.MinReading;
        var maxValue = @Model.Sensor.MaxReading;

        var ctx = document.getElementById('sensorChart').getContext('2d');
        var myChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: sensorData.map(function (reading) {
                    var date = new Date(reading.created);
                    return `${date.getDate()}/${date.getMonth() + 1}  ${date.getHours()}:${date.getMinutes()}`;
                }),
                datasets: [{
                    label: @Json.Serialize(Model.Sensor.Description),
                    data: sensorData.map(function (reading) { return parseFloat(reading.value); }), // make sure this is a number
                    borderColor: 'rgba(0, 123, 255, 0.5)',
                    borderWidth: 2
                }]
            },
            options: {
                scales: {
                    y: {
                        min: parseFloat(minValue),
                        max: parseFloat(maxValue),
                        ticks: {
                            // Include a unit in the label
                            callback: function (value, index, values) {
                                return value + ' cm'; // Replace 'unit' with your actual unit
                            }
                        }
                    }
                },
            }
        });
    </script> *@
</div>